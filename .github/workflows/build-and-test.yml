name: Elixir Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  test:
    runs-on: [ubuntu-latest]
    env:
      MIX_ENV: test

    strategy:
      matrix:
        elixir: [ 1.10.4, 1.11.3, 1.12.0 ]
        otp: [ 22.2, 23.3, 24.0 ]

    steps:
    - uses: actions/checkout@v2
    # Officially recommended Elixir GitHub Actions setup taken from:
    # https://github.com/nurturenature/elixir_actions#elixir-actions-for-github
    - name: Install Erlang/OTP + Elixir 🏗️
      id: setup-beam
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }} # version range or exact (required)
        elixir-version: ${{ matrix.elixir }} # version range or exact (required)
        # install-hex: true (default)
        # install-rebar: true (default)
      # outputs: ${steps.setup-beam.outputs.(otp, elixir, rebar3)-version} (exact version installed)
    - name: Restore dependency/build cache 🗃️
      uses: actions/cache@v2
      id: restore-cache
      with:
        path: |
          deps
          _build
        # cache key is hierarchical: OS, otp-version, elixir-version, mix.lock
        key: ${{ runner.os }}-mix-${{ steps.setup-beam.outputs.otp-version }}-${{ steps.setup-beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        # restore keys are tried on cache misses, and only match the key prefix
        restore-keys: |
          ${{ runner.os }}-mix-${{ steps.setup-beam.outputs.otp-version }}-${{ steps.setup-beam.outputs.elixir-version }}-
          ${{ runner.os }}-mix-${{ steps.setup-beam.outputs.otp-version }}-
          ${{ runner.os }}-mix-
    - name: Install Dependencies 🔗
      run: mix deps.get

    - name: Build 🔧
      run: mix compile --all-warnings --warnings-as-errors

    - name: Test 🦺
      run: mix test --trace
      # If the compile fails, it's likely due to a warning. Go ahead and run the tests
      # to give the devs feedback and save them some time.
      if: always()

    - name: Check Formatting 📚
      run: mix format --check-formatted
      if: always()
